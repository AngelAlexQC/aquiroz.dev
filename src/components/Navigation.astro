---
import { FiCode } from "react-icons/fi";
import { colors, customClasses } from "../utils/colors";

export interface Props {
  lang: "es" | "en";
}

const { lang } = Astro.props;
const currentPath = Astro.url.pathname;
const isSpanish = currentPath === "/es" || currentPath === "/es/";
const switchUrl = isSpanish ? "/" : "/es";
const baseUrl = isSpanish ? "/es" : "";
---

<nav
  class="bg-white bg-opacity-80 backdrop-blur-md shadow-sm fixed w-full top-0 z-50 transition-all duration-300"
  id="main-nav"
  role="navigation"
  aria-label={lang === "es" ? "Navegación principal" : "Main navigation"}>
  <div class="max-w-6xl mx-auto px-4">
    <div class="flex justify-between items-center h-16">
      <div class="flex items-center space-x-2 relative">
        <!-- Main navigation link that includes logo, avatar and name -->
        <a href={baseUrl || "/"} class="flex items-center space-x-2 relative" id="logo-link">
          <!-- Logo icon - always visible, moves smoothly to the right -->
          <div
            id="nav-logo"
            class={`w-10 h-10 flex items-center justify-center opacity-100 scale-100 transition-all duration-700 ease-out transform ${colors.text.primary} z-10`}>
            <FiCode size={28} />
          </div>

          <!-- Avatar in navbar (initially hidden, appears in logo's original position) -->
          <div
            id="nav-avatar"
            class={`w-10 h-10 ${colors.gradients.avatar} rounded-full flex items-center justify-center ${colors.text.white} text-sm font-bold opacity-0 scale-75 transition-all duration-500 ease-out transform absolute left-0`}>
            AQ
          </div>

          <!-- Name/Title in navbar (appears after avatar) -->
          <div
            class="flex flex-col opacity-0 transition-all duration-600 ease-out transform translate-x-[-20px] ml-2"
            id="nav-name-container">
            <span
              id="nav-title"
              class={`text-lg font-bold ${colors.text.primary} transition-all duration-500 transform origin-left`}>
              Ángel Quiroz
            </span>
            <span
              id="nav-subtitle"
              class={`text-xs ${colors.text.muted} transition-all duration-500 transform translate-y-2`}>
              {lang === "es" ? "Ingeniero de Software" : "Software Engineer"}
            </span>
          </div>
        </a>
      </div>

      <div class="hidden md:flex items-center space-x-4 relative">
        <!-- Indicador deslizante de fondo -->
        <div 
          id="nav-indicator" 
          class="absolute h-full bg-gradient-to-r from-blue-100 to-purple-100 rounded-lg transition-all duration-500 ease-out opacity-0 -z-10"
          style="width: 0px; left: 0px;">
        </div>
        
        <!-- Línea deslizante debajo -->
        <div 
          id="nav-underline" 
          class="absolute bottom-0 h-0.5 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full transition-all duration-500 ease-out opacity-0"
          style="width: 0px; left: 0px;">
        </div>

        <a href={`${baseUrl}#about`} class="nav-link relative px-3 py-2 text-gray-700 hover:text-blue-600 transition-colors duration-300" data-section="about">
          {lang === "es" ? "Acerca de" : "About"}
        </a>
        <a href={`${baseUrl}#experience`} class="nav-link relative px-3 py-2 text-gray-700 hover:text-blue-600 transition-colors duration-300" data-section="experience">
          {lang === "es" ? "Experiencia" : "Experience"}
        </a>
        <a href={`${baseUrl}#skills`} class="nav-link relative px-3 py-2 text-gray-700 hover:text-blue-600 transition-colors duration-300" data-section="skills">
          {lang === "es" ? "Aptitudes" : "Skills"}
        </a>
        <a href={`${baseUrl}#projects`} class="nav-link relative px-3 py-2 text-gray-700 hover:text-blue-600 transition-colors duration-300" data-section="projects">
          {lang === "es" ? "Proyectos" : "Projects"}
        </a>
        <a href={`${baseUrl}#contact`} class="nav-link relative px-3 py-2 text-gray-700 hover:text-blue-600 transition-colors duration-300" data-section="contact">
          {lang === "es" ? "Contacto" : "Contact"}
        </a>

        <a
          href={switchUrl}
          class={`${colors.bg.primary} ${colors.text.white} px-3 py-1 rounded-md text-sm ${colors.hover.primaryBg} transition-colors`}>
          {lang === "es" ? "EN" : "ES"}
        </a>
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button id="mobile-menu-button" class={customClasses.navLink}>
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile menu -->
    <div id="mobile-menu" class="hidden md:hidden pb-4">
      <div class="space-y-2">
        <a
          href={`/${lang}/#about`}
          class="nav-link block px-3 py-2 text-gray-700 hover:text-blue-600 transition-colors duration-300"
          data-section="about">
          {lang === "es" ? "Acerca de" : "About"}
        </a>
        <a
          href={`/${lang}/#experience`}
          class="nav-link block px-3 py-2 text-gray-700 hover:text-blue-600 transition-colors duration-300"
          data-section="experience">
          {lang === "es" ? "Experiencia" : "Experience"}
        </a>
        <a
          href={`/${lang}/#skills`}
          class="nav-link block px-3 py-2 text-gray-700 hover:text-blue-600 transition-colors duration-300"
          data-section="skills">
          {lang === "es" ? "Aptitudes" : "Skills"}
        </a>
        <a
          href={`/${lang}/#projects`}
          class="nav-link block px-3 py-2 text-gray-700 hover:text-blue-600 transition-colors duration-300"
          data-section="projects">
          {lang === "es" ? "Proyectos" : "Projects"}
        </a>
        <a
          href={`/${lang}/#contact`}
          class="nav-link block px-3 py-2 text-gray-700 hover:text-blue-600 transition-colors duration-300"
          data-section="contact">
          {lang === "es" ? "Contacto" : "Contact"}
        </a>
        <a
          href={switchUrl}
          class={`block ${colors.bg.primary} ${colors.text.white} px-3 py-2 rounded-md text-sm ${colors.hover.primaryBg} transition-colors w-fit`}>
          {lang === "es" ? "EN" : "ES"}
        </a>
      </div>
    </div>
  </div>

  <script>
    // Variables globales para las animaciones
    let lastScrollY = 0;
    let ticking = false;
    let activeSection = '';
    let sections: { id: string; element: HTMLElement; top: number; bottom: number }[] = [];

    // Mobile menu toggle
    document
      .getElementById("mobile-menu-button")
      ?.addEventListener("click", () => {
        const menu = document.getElementById("mobile-menu");
        menu?.classList.toggle("hidden");
      });

    // Función para animar los indicadores de navegación activa
    function animateNavIndicators(targetLink: HTMLElement) {
      const indicator = document.getElementById('nav-indicator');
      const underline = document.getElementById('nav-underline');
      const navContainer = targetLink.closest('.relative');
      
      if (!indicator || !underline || !navContainer) return;

      const containerRect = navContainer.getBoundingClientRect();
      const linkRect = targetLink.getBoundingClientRect();
      
      // Calcular posición relativa al contenedor
      const left = linkRect.left - containerRect.left;
      const width = linkRect.width;
      
      // Animar el indicador de fondo
      indicator.style.left = `${left}px`;
      indicator.style.width = `${width}px`;
      indicator.classList.remove('opacity-0');
      indicator.classList.add('opacity-100');
      
      // Animar la línea inferior
      underline.style.left = `${left}px`;
      underline.style.width = `${width}px`;
      underline.classList.remove('opacity-0');
      underline.classList.add('opacity-100');
      
      // Actualizar estilos de los enlaces
      document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('text-blue-600', 'font-semibold');
        link.classList.add('text-gray-700');
      });
      
      targetLink.classList.remove('text-gray-700');
      targetLink.classList.add('text-blue-600', 'font-semibold');
    }

    // Función para ocultar los indicadores
    function hideNavIndicators() {
      const indicator = document.getElementById('nav-indicator');
      const underline = document.getElementById('nav-underline');
      
      if (indicator) {
        indicator.classList.remove('opacity-100');
        indicator.classList.add('opacity-0');
      }
      
      if (underline) {
        underline.classList.remove('opacity-100');
        underline.classList.add('opacity-0');
      }
      
      // Resetear estilos de los enlaces
      document.querySelectorAll('.nav-link').forEach(link => {
        link.classList.remove('text-blue-600', 'font-semibold');
        link.classList.add('text-gray-700');
      });
    }

    // Función para detectar la sección activa basada en el scroll
    function detectActiveSection() {
      const scrollPosition = window.scrollY + 100; // Offset para detección temprana
      
      let currentActiveSection = '';
      
      // Verificar cada sección
      for (const section of sections) {
        if (scrollPosition >= section.top && scrollPosition < section.bottom) {
          currentActiveSection = section.id;
          break;
        }
      }
      
      // Si estamos en la parte superior de la página, no hay sección activa
      if (window.scrollY < window.innerHeight * 0.1) {
        currentActiveSection = '';
      }
      
      // Solo actualizar si cambió la sección activa
      if (currentActiveSection !== activeSection) {
        activeSection = currentActiveSection;
        updateActiveNavLink();
      }
    }

    // Función para actualizar el enlace activo en la navegación
    function updateActiveNavLink() {
      if (!activeSection) {
        hideNavIndicators();
        return;
      }
      
      const activeLink = document.querySelector(`.nav-link[data-section="${activeSection}"]`) as HTMLElement;
      if (activeLink && window.innerWidth >= 768) { // Solo en desktop
        animateNavIndicators(activeLink);
      }
    }

    // Función para calcular las posiciones de las secciones
    function calculateSectionPositions() {
      sections = [];
      const sectionIds = ['about', 'experience', 'skills', 'projects', 'contact'];
      
      sectionIds.forEach((id, index) => {
        const element = document.getElementById(id);
        if (element) {
          const rect = element.getBoundingClientRect();
          const top = rect.top + window.scrollY - 100; // Offset para detección
          const bottom = index < sectionIds.length - 1 
            ? (document.getElementById(sectionIds[index + 1])?.getBoundingClientRect().top || 0) + window.scrollY - 100
            : document.body.scrollHeight;
          
          sections.push({ id, element, top, bottom });
        }
      });
    }

    // Smooth scroll para enlaces de navegación
    function initSmoothScroll() {
      // Handle logo link behavior
      const logoLink = document.getElementById('logo-link');
      if (logoLink) {
        logoLink.addEventListener('click', function(e: Event) {
          e.preventDefault();
          const target = e.currentTarget as HTMLAnchorElement;
          const href = target.getAttribute('href') || '/';
          
          // Get current path (without hash)
          const currentPath = window.location.pathname;
          const targetPath = new URL(href, window.location.origin).pathname;
          
          // Check if we're on the same page
          if (currentPath === targetPath) {
            // Same page - smooth scroll to top
            window.scrollTo({
              top: 0,
              behavior: 'smooth'
            });
            
            // Update URL to remove any hash
            history.pushState(null, '', href);
            
            // Recalcular secciones y detectar activa
            setTimeout(() => {
              calculateSectionPositions();
              detectActiveSection();
            }, 100);
          } else {
            // Different page - navigate normally
            window.location.href = href;
          }
        });
      }
      
      // Get all navigation links that point to sections
      const navLinks = document.querySelectorAll('.nav-link[data-section]');
      
      navLinks.forEach(link => {
        link.addEventListener('click', function(e: Event) {
          const target = e.currentTarget as HTMLAnchorElement;
          const href = target.getAttribute('href');
          
          // Check if it's a hash link (section link)
          if (href && href.includes('#')) {
            const targetId = href.split('#')[1];
            const targetElement = document.getElementById(targetId);
            
            if (targetElement) {
              e.preventDefault();
              
              // Close mobile menu if open
              const mobileMenu = document.getElementById("mobile-menu");
              mobileMenu?.classList.add("hidden");
              
              // Calculate offset for fixed navigation
              const navHeight = document.getElementById("main-nav")?.offsetHeight || 64;
              const targetPosition = targetElement.offsetTop - navHeight;
              
              // Smooth scroll to target
              window.scrollTo({
                top: targetPosition,
                behavior: 'smooth'
              });
              
              // Update URL without causing a jump
              history.pushState(null, '', href);
              
              // Actualizar la sección activa inmediatamente para feedback visual rápido
              activeSection = targetId;
              if (window.innerWidth >= 768) {
                animateNavIndicators(target as HTMLElement);
              }
              
              // Recalcular posiciones después del scroll
              setTimeout(() => {
                calculateSectionPositions();
                detectActiveSection();
              }, 600); // Tiempo después de que termine la animación de scroll
            }
          }
        });
      });
    }

    // Scroll-triggered navigation transformation
    function updateNavigation() {
      const currentScrollY = window.scrollY;
      const nav = document.getElementById("main-nav");
      const navLogo = document.getElementById("nav-logo");
      const navAvatar = document.getElementById("nav-avatar");
      const navTitle = document.getElementById("nav-title");
      const navSubtitle = document.getElementById("nav-subtitle");
      const navNameContainer = document.getElementById("nav-name-container");

      // Trigger point - when user scrolls past the hero section
      const triggerPoint = window.innerHeight * 0.3; // 30% of viewport height

      if (currentScrollY > triggerPoint) {
        // Show navigation elements with smooth animations
        nav?.classList.add("nav-scrolled");

        // Move logo smoothly to the right (approximately 180px to make space for avatar + name)
        navLogo?.classList.add("translate-x-[180px]");

        // Show avatar in logo's original position
        navAvatar?.classList.remove("opacity-0", "scale-75");
        navAvatar?.classList.add("opacity-100", "scale-100");

        // Show name container
        navNameContainer?.classList.remove("opacity-0", "translate-x-[-20px]");
        navNameContainer?.classList.add("opacity-100", "translate-x-0");

        // Show subtitle
        navSubtitle?.classList.remove("translate-y-2");
        navSubtitle?.classList.add("translate-y-0");
      } else {
        // Hide navigation elements and return logo to original position
        nav?.classList.remove("nav-scrolled");

        // Move logo back to original position
        navLogo?.classList.remove("translate-x-[180px]");

        // Hide avatar
        navAvatar?.classList.remove("opacity-100", "scale-100");
        navAvatar?.classList.add("opacity-0", "scale-75");

        // Hide name container
        navNameContainer?.classList.remove("opacity-100", "translate-x-0");
        navNameContainer?.classList.add("opacity-0", "translate-x-[-20px]");

        // Hide subtitle
        navSubtitle?.classList.remove("translate-y-0");
        navSubtitle?.classList.add("translate-y-2");
      }

      // Detectar sección activa
      detectActiveSection();

      lastScrollY = currentScrollY;
      ticking = false;
    }

    function requestTick() {
      if (!ticking) {
        requestAnimationFrame(updateNavigation);
        ticking = true;
      }
    }

    // Función para manejar cambios de tamaño de ventana
    function handleResize() {
      // Recalcular posiciones de secciones
      calculateSectionPositions();
      
      // Si estamos en móvil, ocultar indicadores
      if (window.innerWidth < 768) {
        hideNavIndicators();
      } else {
        // Si volvemos a desktop, detectar sección activa
        detectActiveSection();
      }
    }

    // Initialize everything when DOM is loaded
    document.addEventListener('DOMContentLoaded', function() {
      initSmoothScroll();
      calculateSectionPositions();
      updateNavigation();
    });

    // Listen for scroll events
    window.addEventListener("scroll", requestTick, { passive: true });

    // Listen for resize events
    window.addEventListener("resize", handleResize, { passive: true });

    // También inicializar inmediatamente por si DOMContentLoaded ya se disparó
    initSmoothScroll();
    setTimeout(() => {
      calculateSectionPositions();
      updateNavigation();
    }, 100);
  </script>

  <style>
    .nav-scrolled {
      background-color: rgba(255, 255, 255, 0.95);
      box-shadow:
        0 10px 15px -3px rgba(0, 0, 0, 0.1),
        0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    /* Smooth transitions for all nav elements */
    #nav-logo,
    #nav-avatar,
    #nav-title,
    #nav-subtitle,
    #nav-name-container {
      transition: all 0.7s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }

    /* Estilos para los indicadores de navegación activa */
    #nav-indicator {
      transition: all 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      border-radius: 8px;
    }

    #nav-underline {
      transition: all 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
      border-radius: 2px;
    }

    /* Efectos hover para los enlaces de navegación */
    .nav-link {
      position: relative;
      transition: all 0.3s ease;
    }

    .nav-link:hover {
      transform: translateY(-1px);
    }

    /* Efecto de pulso sutil para el enlace activo */
    .nav-link.text-blue-600 {
      animation: subtle-pulse 3s ease-in-out infinite;
    }

    @keyframes subtle-pulse {
      0%, 100% {
        text-shadow: 0 0 0 rgba(59, 130, 246, 0);
      }
      50% {
        text-shadow: 0 0 8px rgba(59, 130, 246, 0.2);
      }
    }

    /* Mejorar la transición del indicador de fondo */
    #nav-indicator {
      backdrop-filter: blur(4px);
      border: 1px solid rgba(59, 130, 246, 0.1);
    }

    /* Efecto adicional para el underline */
    #nav-underline {
      box-shadow: 0 0 8px rgba(59, 130, 246, 0.3);
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      #nav-indicator,
      #nav-underline {
        display: none;
      }
    }

    /* Animación suave para cambios de estado */
    .nav-link {
      transition: 
        color 0.3s ease,
        font-weight 0.3s ease,
        transform 0.3s ease,
        text-shadow 0.3s ease;
    }
  </style>
</nav>
